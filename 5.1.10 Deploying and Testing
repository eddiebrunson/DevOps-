# 5. Microservices at Scale using AWS & Kubernetes
___

## Lesson 1: Deploy an Event-Driven Microservice

### 10. Deploying and Testing

___

### Operationalizing AWS Lambda
Continuing with the analogy of a motion-sensing light in the garage, imagine if there were many things that could turn on the light in the garage. What are some triggers that could be set up to turn on the light in the garage?

* Opening of the garage door
* Home burglar alarm
* A nightly timer that starts at 8 PM and ends at 8 AM

Just like the home automation example, there are many ways to trigger a Lambda function. One of the most common ways to trigger the Lambda function would be through API Gateway. A web service is created by adding API Gateway to the lambda, and then, if the URL is requested by a browser or an API call, it would, in turn, trigger the Lambda function.

Another common way to trigger the AWS Lambda function would be to attach it to Amazon S3. Instead of the Lambda function being triggered from the web service, it could be triggered every time a new file is placed in an S3 bucket. Yet another trigger could be a CloudWatch Event Timer. A timer could be set up to run every hour. At the top of each hour, the Lambda function would be called.

Let’s get into a real-world example now. A company that needs to collect a competitor’s pricing, say for a similar washing machine they are selling, could create a Lambda function that scrapes the competitor’s website. Next, a CloudWatch Event timer could run nightly to scrape the website and put the results into an S3 bucket. When the S3 bucket receives the HTML results, a second AWS Lambda function could be triggered that extracts the pricing information from the HTML file and writes it to DynamoDB, if it is lower than the current value in the database. Finally, the website itself could host a third AWS Lambda function that uses API Gateway to serve out the companies current prices, which will always be at least the same price or lower than their competitors.