# 5. Microservices at Scale using AWS & Kubernetes
___

## Lesson 1: Deploy an Event-Driven Microservice

### 5. Cloud-Native

___

### What are the Top Ten Benefits of Cloud Computing?
### Cost
There is no up-front cost and resources can be precisely metered to meet demand.

### Speed
The cloud offers self-service, so an expert user can leverage the resources to build solutions quickly.

### Global scale
All major cloud providers have a global scale, which means services can be provisioned all over the world to meet demand in a geographic region.

### Productivity
Many tasks, such as racking servers, configuring network hardware, and physically securing a data center, no longer exists. Companies can focus on building core intellectual property versus reinventing the wheel.

### Performance
The performance of applications can leverage a continuous upgrade cycle. The network, the storage and the compute improve over time consistently. Additionally, Cloud-Native applications are able to leverage new capabilities in the cloud to further increase performance.

### Reliability
The core architecture of the cloud offers redundancy at every step. There are multiple regions and multiple data centers in each region. Cloud-native architecture can design around these capabilities, leading to highly available architectures. Additionally, many-core cloud services are themselves highly available, like Amazon S3, which has nine nines, or 99.999999999% reliability.

### Security
You are only as good as your weakest link with security. By consolidating to centralized security, a higher level of security occurs. Problems such as physical access to a data center or encryption at rest become industry standard on day one.

### Relational Database
A [relational database](https://en.wikipedia.org/wiki/Relational_database) is a tabular system that stores a finite amount of information. You can think of a relational database as a spreadsheet of values/data, where each row in the spreadsheet has a unique ID.

### What is Moore's Law?
The general premise of Moore’s Law is “that the speed and capability of computers can be expected to double every two years, as a result of increases in the number of transistors a microchip can contain.” - [Oxford dictionary](https://www.investopedia.com/terms/m/mooreslaw.asp)

In 2015, Moore’s Law was effectively over, and gains are at 3% a year. One of the most challenging areas of computer science is distributed computing. In the modern era of cloud computing, there are a few fundamental shifts that have changed everything. One of the most significant shifts is the rise of multicore machines and the end of Moore’s Law.

Moore’s Law exposed two fundamental problems that manifest themselves in the cloud era. The first problem is that CPUs are designed to be multipurpose processors. They are not specialized to run parallel workloads. If you couple that with the ultimate physical limits of increasing CPU speed, the CPU has become less critical in the cloud era.

The second problem is that making multiple core machines to counteract the limitations of single-processor speed has led to a ripple effect on software languages. Many languages previously had substantial problems taking advantage of multiple cores because they were designed in an era before multiple processors existed, let alone the internet. Python is a good case in point here. What makes things even more challenging is that there is “no free lunch” by adding more cores to a problem that is not mostly parallel.